def evaluate_polynomial(coefficients, x):
    return sum(c * (x ** i) for i, c in enumerate(reversed(coefficients)))

def bisection_method(coefficients, a, b, tolerance=1e-6, max_iterations=1000):
    if evaluate_polynomial(coefficients, a) * evaluate_polynomial(coefficients, b) > 0:
        print("在給定區間內無法保證根的存在")
        return None

    for iteration in range(max_iterations):
        c = (a + b) / 2
        polynomial_at_c = evaluate_polynomial(coefficients, c)

        if polynomial_at_c == 0:
            return c
        elif polynomial_at_c * evaluate_polynomial(coefficients, a) < 0:
            b = c
        else:
            a = c

        if (b - a) / 2 < tolerance:
            break

    return (a + b) / 2

# 輸入多項式方程式的係數
coefficients = list(map(float, input("請輸入多項式方程式的係數，以空格分隔（從高次到低次）: ").split()))

# 輸入搜尋區間的左右邊界
a = float(input("輸入搜尋區間的左邊界 a: "))
b = float(input("輸入搜尋區間的右邊界 b: "))

# 使用 bisection_method 函數
result = bisection_method(coefficients, a, b)

if result is not None:
    print("方程式的實數根為:", result)
